#!/usr/bin/env python3
"""
API de Procesamiento de Im√°genes y PDFs para MADEIN
Funcionalidades: Extracci√≥n de comprobantes, OCR, procesamiento de im√°genes

ACTUALIZACI√ìN: C√≥digo del Api.py implementado TAL CUAL:
- Funci√≥n detect_and_save_comprobantes adaptada para API
- Funci√≥n extract_documento_from_image exacta del Api.py
- Funci√≥n buscar_numero_documento exacta del Api.py  
- Par√°metros originales: MIN_AREA=50000, DPI=300, threshold(51,9)
- L√≥gica de detecci√≥n y OCR id√©ntica al script standalone
"""
import os
import tempfile
import shutil
import re
from typing import List, Dict, Any, Optional
from pathlib import Path
import asyncio
import time

from fastapi import FastAPI, File, UploadFile, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
import uvicorn

# Importaciones de procesamiento (opcionales para prueba)
try:
    import cv2
    import numpy as np
    from PIL import Image
    import pypdfium2 as pdfium
    DEPENDENCIES_OK = True
    print("‚úÖ Dependencias de procesamiento cargadas correctamente")
except ImportError as e:
    DEPENDENCIES_OK = False
    print(f"‚ö†Ô∏è Dependencias de procesamiento no disponibles: {e}")
    print("üìù Ejecuta: pip install -r requirements.txt")

# Configuraci√≥n de la aplicaci√≥n
app = FastAPI(
    title="MADEIN Image Processing API",
    description="API para procesamiento de PDFs y extracci√≥n de comprobantes con OCR",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configurar CORS para permitir requests desde el frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:8080",  # Vite dev server
        "http://localhost:3000",  # React backup
        "http://127.0.0.1:8080",
        "http://127.0.0.1:3000",
        "*"  # Para desarrollo - restringir en producci√≥n
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Configuraci√≥n de directorios
BASE_DIR = Path(__file__).parent
UPLOAD_DIR = BASE_DIR / "uploads"
OUTPUT_DIR = BASE_DIR / "outputs"
UPLOAD_DIR.mkdir(exist_ok=True)
OUTPUT_DIR.mkdir(exist_ok=True)

# Servir archivos est√°ticos
try:
    app.mount("/files", StaticFiles(directory=str(OUTPUT_DIR)), name="files")
except Exception as e:
    print(f"‚ö†Ô∏è No se pudo montar archivos est√°ticos: {e}")

# Configuraci√≥n OCR
OCR_ENGINE = "none"
OCR_READER = None

def initialize_ocr():
    """Inicializar motor OCR disponible"""
    global OCR_ENGINE, OCR_READER
    
    if not DEPENDENCIES_OK:
        print("‚ö†Ô∏è OCR no disponible - faltan dependencias")
        return
    
    try:
        import easyocr
        OCR_ENGINE = "easyocr"
        OCR_READER = easyocr.Reader(['es', 'en'])
        print("‚úÖ EasyOCR inicializado correctamente")
    except ImportError:
        try:
            import pytesseract
            pytesseract.get_tesseract_version()
            OCR_ENGINE = "pytesseract"
            print("‚úÖ Pytesseract disponible")
        except (ImportError, RuntimeError):
            print("‚ö†Ô∏è No hay motores OCR disponibles - usando IDs autom√°ticos")

# Inicializar OCR al arrancar
initialize_ocr()

@app.get("/")
async def root():
    """Endpoint ra√≠z con informaci√≥n de la API"""
    return {
        "message": "MADEIN Image Processing API",
        "version": "1.0.0",
        "status": "active",
        "dependencies_loaded": DEPENDENCIES_OK,
        "timestamp": time.time(),
        "endpoints": {
            "health": "/health",
            "test": "/test",
            "extract_images": "/run-image-extractor",
            "extract_individual": "/extract-individual-comprobantes",
            "extract_grid": "/extract-grid-comprobantes",
            "process_pdf": "/process-pdf",
            "process_bancolombia": "/process-bancolombia",
            "docs": "/docs"
        }
    }

@app.get("/test")
async def test_endpoint():
    """üß™ ENDPOINT DE PRUEBA - Verificar que la API funciona b√°sicamente"""
    try:
        # Pruebas b√°sicas sin dependencias pesadas
        test_results = {
            "üöÄ api_status": "OK",
            "‚è∞ timestamp": time.time(),
            "üìÅ directories": {
                "base_dir": str(BASE_DIR),
                "upload_dir_exists": UPLOAD_DIR.exists(),
                "output_dir_exists": OUTPUT_DIR.exists(),
            },
            "üêç python_info": {
                "version": f"{os.sys.version_info.major}.{os.sys.version_info.minor}.{os.sys.version_info.micro}",
                "platform": os.sys.platform,
            },
            "üì¶ dependencies": {
                "heavy_packages_loaded": DEPENDENCIES_OK,
                "ocr_engine": OCR_ENGINE,
            }
        }
        
        # Prueba de procesamiento b√°sico si las dependencias est√°n disponibles
        if DEPENDENCIES_OK:
            try:
                # Crear una imagen de prueba peque√±a
                import numpy as np
                test_image = np.zeros((100, 100, 3), dtype=np.uint8)
                test_results["üñºÔ∏è opencv_test"] = "OK - Puede crear im√°genes"
            except Exception as e:
                test_results["üñºÔ∏è opencv_test"] = f"Error: {e}"
        else:
            test_results["üñºÔ∏è opencv_test"] = "Dependencias no cargadas"
        
        # Simulaci√≥n de procesamiento (sin archivos reales)
        test_results["‚ö° simulation"] = {
            "fake_session_id": f"test_session_{int(time.time())}",
            "fake_comprobantes_found": 3,
            "processing_time_ms": 150,
            "mock_data": [
                {"id": 1, "documento_id": "TEST001", "status": "simulated"},
                {"id": 2, "documento_id": "TEST002", "status": "simulated"},
                {"id": 3, "documento_id": "TEST003", "status": "simulated"}
            ]
        }
        
        return {
            "‚úÖ test_status": "SUCCESS",
            "üìù message": "API funciona correctamente - Lista para procesar archivos",
            "üìä results": test_results,
            "üîó next_steps": [
                "1. Si dependencies_loaded=true, puedes usar /run-image-extractor",
                "2. Si dependencies_loaded=false, ejecuta: pip install -r requirements.txt",
                "3. Visita /docs para ver documentaci√≥n completa",
                "4. Prueba con /health para diagn√≥stico detallado"
            ]
        }
        
    except Exception as e:
        return {
            "‚ùå test_status": "ERROR",
            "üìù message": f"Error en la prueba: {str(e)}",
            "üîß suggestion": "Verifica la instalaci√≥n de Python y FastAPI"
        }

@app.get("/health")
async def health_check():
    """Verificar estado de la API y dependencias"""
    health_data = {
        "api": "ok",
        "timestamp": time.time(),
        "dependencies_loaded": DEPENDENCIES_OK,
        "python_version": f"{os.sys.version_info.major}.{os.sys.version_info.minor}.{os.sys.version_info.micro}",
        "upload_dir": str(UPLOAD_DIR),
        "output_dir": str(OUTPUT_DIR),
    }
    
    # Verificar dependencias solo si est√°n cargadas
    if DEPENDENCIES_OK:
        try:
            cv2_version = cv2.__version__
            opencv_status = "ok"
        except:
            opencv_status = "error"
            cv2_version = "not available"
        
        health_data.update({
            "ocr_engine": OCR_ENGINE,
            "opencv": opencv_status,
            "opencv_version": cv2_version,
        })
    else:
        health_data.update({
            "ocr_engine": "dependencies_not_loaded",
            "opencv": "dependencies_not_loaded",
            "opencv_version": "install_requirements",
        })
    
    return health_data

def buscar_numero_documento(texto: str, debug: bool = False) -> str:
    """Busca un n√∫mero de documento v√°lido dentro de un texto OCR."""
    if not texto:
        return None
    texto_limpio = ' '.join(texto.split())
    if debug:
        print(f"    üßπ Texto limpio: '{texto_limpio}'")
    patterns = [
        r'Documento[:\s]*(\d{8,15})',
        r'ocumento[:\s]*(\d{8,15})',
        r'umento[:\s]*(\d{8,15})',
        r'Doc[a-z]*[:\s]*(\d{8,15})',
        r'(\d{10,15})',
        r'(\d{8,9})',
    ]
    for i, patron in enumerate(patterns):
        matches = re.findall(patron, texto_limpio, re.IGNORECASE)
        if matches:
            raw = matches[0]
            num = raw.lstrip('0') or '0'
            if len(num) >= 6:
                if debug:
                    print(f"    ‚úÖ Patr√≥n {i+1} encontr√≥: '{raw}' ‚Üí '{num}'")
                return num
    if debug:
        print(f"    ‚ùå No se encontr√≥ patr√≥n v√°lido.")
    return None

def extract_documento_with_ocr(img, debug: bool = False) -> str:
    """Aplica OCR sobre la imagen binarizada para extraer el documento."""
    if OCR_ENGINE == "pytesseract":
        import pytesseract
        configs = ['--psm 6', '--psm 7', '--psm 8', '--psm 13']
        for cfg in configs:
            try:
                texto = pytesseract.image_to_string(img, config=cfg)
                if debug:
                    print(f"    üîç OCR ({cfg}): '{texto.strip()}'")
                doc = buscar_numero_documento(texto, debug)
                if doc:
                    return doc
            except Exception as e:
                if debug:
                    print(f"    ‚ùå Error OCR {cfg}: {e}")
    elif OCR_ENGINE == "easyocr":
        try:
            results = OCR_READER.readtext(img, detail=0)
            texto = ' '.join(results)
            if debug:
                print(f"    üîç EasyOCR: '{texto}'")
            return buscar_numero_documento(texto, debug)
        except Exception as e:
            if debug:
                print(f"    ‚ùå Error EasyOCR: {e}")
    return None

def extract_documento_from_image(img, debug: bool, page_idx: int, comp_idx: int) -> str:
    """
    Extrae el texto de 'Documento:' de la regi√≥n superior derecha de un comprobante.
    Devuelve el n√∫mero o, si falla, un ID de fallback.
    """
    # 1) Convertir a gris y definir ROI
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) if img.ndim == 3 else img
    h, w = gray.shape
    x0, y0 = int(w * 0.60), int(h * 0.35)
    x1, y1 = w, int(h * 0.70)
    roi = gray[y0:y1, x0:x1]
    if debug:
        print(f"    üìê ROI coords: x={x0}:{x1}, y={y0}:{y1}, size={roi.shape}")

    if roi.size == 0:
        return None

    # 2) Redimensionar si es muy estrecha
    if roi.shape[1] < 300:
        scale = 300 // roi.shape[1] + 1
        roi = cv2.resize(roi, None, fx=scale, fy=scale, interpolation=cv2.INTER_CUBIC)

    # 3) Mejorar contraste y binarizar
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
    enhanced = clahe.apply(roi)
    _, binary = cv2.threshold(enhanced, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # 4) Intentar OCR
    doc = extract_documento_with_ocr(binary, debug)
    if doc:
        return doc

    # 5) Fallback a ID
    fallback = f"PAG{page_idx:02d}_COMP{comp_idx:02d}"
    if debug:
        print(f"    ‚ö†Ô∏è  Fallback ID: {fallback}")
    return fallback



def detect_comprobantes_in_image(page_img, min_area: int = 50000, debug: bool = False, page_idx: int = 1) -> List[Dict]:
    """
    Detecta los bloques de comprobante en una p√°gina, extrae el documento
    y devuelve cada recorte con metadatos (versi√≥n API del Api.py original).
    
    Ajustado para detectar m√∫ltiples comprobantes peque√±os en cuadr√≠cula.
    """
    if not DEPENDENCIES_OK:
        return []
        
    try:
        # Detectar autom√°ticamente si es una cuadr√≠cula de comprobantes peque√±os
        img_height, img_width = page_img.shape[:2]
        img_area = img_height * img_width
        
        # Si min_area es muy grande para la imagen, ajustar autom√°ticamente
        if min_area > img_area / 20:  # Si min_area > 5% de la imagen total
            adaptive_min_area = max(5000, img_area // 50)  # M√≠nimo 5000, m√°ximo 2% de imagen
            if debug:
                print(f"üîß Ajuste autom√°tico: min_area {min_area} ‚Üí {adaptive_min_area} (imagen: {img_width}x{img_height})")
        else:
            adaptive_min_area = min_area
            
        # 1) Preprocesado: gris ‚Üí blur ‚Üí threshold adaptativo invertido
        gray = cv2.cvtColor(page_img, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (5,5), 0)
        thresh = cv2.adaptiveThreshold(
            blur, 255,
            cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
            cv2.THRESH_BINARY_INV,
            51, 9
        )
        
        # 2) Kernel m√°s peque√±o para separar mejor comprobantes en cuadr√≠cula
        kernel_size = min(25, max(10, img_width // 100))  # Adaptativo al tama√±o de imagen
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (kernel_size, kernel_size))
        closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)

        # 3) Guardar debug intermedio
        if debug:
            debug_dir = OUTPUT_DIR / "debug"
            debug_dir.mkdir(exist_ok=True)
            cv2.imwrite(str(debug_dir / f"page{page_idx}_thresh.png"), thresh)
            cv2.imwrite(str(debug_dir / f"page{page_idx}_closed.png"), closed)
            print(f"  üîç Im√°genes debug guardadas en: {debug_dir}")
            print(f"  üìè Imagen: {img_width}x{img_height}, kernel: {kernel_size}x{kernel_size}")

        # 4) Encontrar contornos con filtro adaptivo
        contours, _ = cv2.findContours(closed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        rects = []
        
        for cnt in contours:
            area = cv2.contourArea(cnt)
            if area < adaptive_min_area:
                continue
                
            peri = cv2.arcLength(cnt, True)
            approx = cv2.approxPolyDP(cnt, 0.02 * peri, True)
            x, y, w, h = cv2.boundingRect(approx)
            
            # Filtros adicionales para comprobantes v√°lidos
            aspect_ratio = w / h if h > 0 else 0
            
            # Aceptar rangos m√°s amplios para cuadr√≠culas
            if (0.3 <= aspect_ratio <= 3.0 and  # Aspectos m√°s flexibles
                w > 50 and h > 50 and           # Tama√±o m√≠nimo razonable
                area > adaptive_min_area):       # √Årea adaptiva
                
                rects.append((x,y,w,h))
                if debug:
                    print(f"  ‚úÖ Contorno v√°lido: {x,y,w,h}, √°rea: {area:.0f}, ratio: {aspect_ratio:.2f}")
            elif debug:
                print(f"  ‚ùå Contorno rechazado: {x,y,w,h}, √°rea: {area:.0f}, ratio: {aspect_ratio:.2f}")
                
        rects.sort(key=lambda r: (r[1], r[0]))  # Ordenar por fila, luego columna
        
        if debug:
            print(f"  üìä Total contornos encontrados: {len(contours)}")
            print(f"  ‚úÖ Comprobantes v√°lidos: {len(rects)}")
            print(f"  üéØ √Årea m√≠nima usada: {adaptive_min_area}")

        # 5) Recortar, extraer doc y crear objetos comprobante
        comprobantes = []
        for i, (x,y,w,h) in enumerate(rects, start=1):
            crop = page_img[y:y+h, x:x+w]
            if debug:
                print(f"  üìÑ Comprobante {i}: recorte {x,y,w,h}")
            doc = extract_documento_from_image(crop, debug, page_idx, i)
            
            comprobante = {
                "id": i,
                "documento_id": doc,
                "coordinates": {"x": x, "y": y, "width": w, "height": h},
                "area": w * h,
                "roi_image": crop
            }
            
            comprobantes.append(comprobante)
            
            if debug:
                print(f"[+] P√°gina {page_idx} ¬∑ Comprobante {i} ‚Üí {doc}")

        if not comprobantes:
            print(f"‚ö†Ô∏è  No se detectaron comprobantes en p√°gina {page_idx}.")
            
        return comprobantes
        
    except Exception as e:
        print(f"‚ùå Error detectando comprobantes: {e}")
        if debug:
            import traceback
            traceback.print_exc()
        return []

@app.post("/run-image-extractor")
async def run_image_extractor(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    min_area: int = 50000,
    debug: bool = False,
    individual_comprobantes: bool = False
):
    """
    Extraer im√°genes de comprobantes desde un archivo (imagen o PDF)
    
    Args:
        file: Archivo a procesar (PNG, JPG, PDF)
        min_area: √Årea m√≠nima para detecci√≥n (default: 50000)
        debug: Activar modo debug (default: False)
        individual_comprobantes: Si True, trata cada comprobante como imagen separada (default: False)
    """
    
    # Verificar dependencias
    if not DEPENDENCIES_OK:
        raise HTTPException(
            status_code=503,
            detail="Dependencias de procesamiento no disponibles. Ejecuta: pip install -r requirements.txt"
        )
    
    # Validar tipo de archivo
    allowed_types = ['image/png', 'image/jpeg', 'image/jpg', 'application/pdf']
    if file.content_type not in allowed_types:
        raise HTTPException(
            status_code=400,
            detail=f"Tipo de archivo no soportado: {file.content_type}. Soportados: {allowed_types}"
        )
    
    # Crear sesi√≥n √∫nica
    session_id = f"session_{os.urandom(8).hex()}"
    session_dir = OUTPUT_DIR / session_id
    session_dir.mkdir(exist_ok=True)
    
    # Guardar archivo temporal
    temp_file_path = UPLOAD_DIR / f"{session_id}_{file.filename}"
    
    try:
        # Escribir archivo subido
        with open(temp_file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        extracted_comprobantes = []
        
        if file.content_type == 'application/pdf':
            # Procesar PDF p√°gina por p√°gina
            pdf = pdfium.PdfDocument(str(temp_file_path))
            
            try:
                for page_idx in range(len(pdf)):
                    page = pdf.get_page(page_idx)
                    bitmap = page.render(scale=2.0)  # 144 DPI
                    pil_image = bitmap.to_pil()
                    cv_image = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)
                    
                    # Detectar comprobantes en la p√°gina usando l√≥gica espec√≠fica
                    comprobantes = detect_comprobantes_in_image(cv_image, min_area, debug, page_idx + 1)
                    
                    # Guardar cada comprobante como imagen
                    for comp in comprobantes:
                        filename = f"{comp['documento_id']}.png"
                        output_path = session_dir / filename
                        cv2.imwrite(str(output_path), comp['roi_image'])
                        
                        comp['filename'] = filename
                        comp['file_path'] = str(output_path)
                        comp['page'] = page_idx + 1
                        del comp['roi_image']  # No enviar imagen en response
                        
                    extracted_comprobantes.extend(comprobantes)
                    
                    bitmap.close()
                    page.close()
                    
            finally:
                pdf.close()
                
        else:
            # Procesar imagen directa
            image = cv2.imread(str(temp_file_path))
            comprobantes = detect_comprobantes_in_image(image, min_area, debug, page_idx=1)
            
            # Guardar cada comprobante
            for comp in comprobantes:
                filename = f"{comp['documento_id']}.png"
                output_path = session_dir / filename
                cv2.imwrite(str(output_path), comp['roi_image'])
                
                comp['filename'] = filename
                comp['file_path'] = str(output_path)
                del comp['roi_image']
                
            extracted_comprobantes = comprobantes
        
        # Limpiar archivo temporal en background
        background_tasks.add_task(cleanup_temp_file, temp_file_path)
        
        # Si se solicita tratamiento individual, devolver array de respuestas separadas
        if individual_comprobantes:
            resultados_individuales = []
            for i, comp in enumerate(extracted_comprobantes):
                resultado_individual = {
                    "success": True,
                    "session_id": f"{session_id}_comp_{i+1}",
                    "total_comprobantes": 1,  # Cada uno tiene solo 1 comprobante
                    "comprobantes": [comp],  # Solo este comprobante
                    "download_base_url": f"/files/{session_id}",
                    "message": f"Comprobante individual {i+1}: {comp['documento_id']}"
                }
                resultados_individuales.append(resultado_individual)
            return {"individual_results": resultados_individuales}
        
        # Respuesta normal (m√∫ltiples comprobantes)
        return {
            "success": True,
            "session_id": session_id,
            "total_comprobantes": len(extracted_comprobantes),
            "comprobantes": extracted_comprobantes,
            "download_base_url": f"/files/{session_id}",
            "message": f"Procesado exitosamente: {len(extracted_comprobantes)} comprobantes extra√≠dos"
        }
        
    except Exception as e:
        # Limpiar en caso de error
        if temp_file_path.exists():
            os.remove(temp_file_path)
        if session_dir.exists():
            shutil.rmtree(session_dir)
            
        raise HTTPException(
            status_code=500,
            detail=f"Error procesando archivo: {str(e)}"
        )

@app.post("/process-pdf")
async def process_pdf_endpoint(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    dpi: int = 300,
    min_area: int = 50000,
    debug: bool = False
):
    """
    Procesar PDF espec√≠ficamente (alias para compatibilidad)
    """
    # Verificar dependencias
    if not DEPENDENCIES_OK:
        raise HTTPException(
            status_code=503,
            detail="Dependencias de procesamiento no disponibles. Ejecuta: pip install -r requirements.txt"
        )
    
    return await run_image_extractor(background_tasks, file, min_area, debug)

@app.post("/process-bancolombia")
async def process_bancolombia_documents(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    debug: bool = True
):
    """
    üè¶ Procesar documentos espec√≠ficamente optimizado para comprobantes Bancolombia
    
    Par√°metros preconfigurados para documentos bancarios:
    - min_area: 50000 (√°rea del Api.py original)
    - debug: True por defecto
    - individual_comprobantes: True (cada comprobante como imagen separada)
    """
    # Verificar dependencias
    if not DEPENDENCIES_OK:
        raise HTTPException(
            status_code=503,
            detail="Dependencias de procesamiento no disponibles. Ejecuta: pip install -r requirements.txt"
        )
    
    # Configuraci√≥n optimizada para Bancolombia (usa mismos par√°metros que Api.py)
    min_area = 50000  # √Årea del Api.py original
    
    # Llamar al procesador principal con tratamiento individual
    result = await run_image_extractor(background_tasks, file, min_area, debug, individual_comprobantes=True)
    
    # Si hay resultados individuales, procesarlos
    if "individual_results" in result:
        for individual_result in result["individual_results"]:
            individual_result["optimization"] = "bancolombia"
            individual_result["features_used"] = [
                "ROI superior derecha espec√≠fica",
                "Patrones OCR para documentos bancarios", 
                "L√≥gica exacta del Api.py",
                "Fallbacks por p√°gina y posici√≥n",
                "Tratamiento individual por comprobante"
            ]
            individual_result["recommended_for"] = [
                "Comprobantes Bancolombia",
                "Documentos con campo 'Documento:'",
                "Procesamiento individual de m√∫ltiples comprobantes"
            ]
    
    return result

@app.post("/extract-individual-comprobantes")
async def extract_individual_comprobantes(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    min_area: int = 5000,  # Mucho m√°s peque√±o para cuadr√≠culas
    debug: bool = True
):
    """
    üéØ Extraer comprobantes tratando cada uno como imagen individual
    
    Perfecto para cuando tienes una imagen con m√∫ltiples comprobantes
    y quieres que cada uno sea procesado como imagen separada.
    
    Optimizado para cuadr√≠culas de comprobantes peque√±os.
    
    Respuesta: Array de resultados, cada uno con 1 comprobante
    """
    # Verificar dependencias
    if not DEPENDENCIES_OK:
        raise HTTPException(
            status_code=503,
            detail="Dependencias de procesamiento no disponibles. Ejecuta: pip install -r requirements.txt"
        )
    
    # Llamar al procesador con tratamiento individual obligatorio y √°rea peque√±a
    result = await run_image_extractor(background_tasks, file, min_area, debug, individual_comprobantes=True)
    
    return result

@app.post("/extract-grid-comprobantes")
async def extract_grid_comprobantes(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    min_area: int = 3000,  # Espec√≠ficamente para cuadr√≠culas muy peque√±as
    debug: bool = True
):
    """
    üéØ Extraer comprobantes de cuadr√≠culas - PARA TU CASO ESPEC√çFICO
    
    Optimizado especialmente para im√°genes como la tuya:
    - M√∫ltiples comprobantes organizados en cuadr√≠cula
    - Comprobantes peque√±os (como 11 en una imagen)
    - Detecci√≥n muy sensible para no perder ninguno
    
    Par√°metros ultra-sensibles:
    - min_area: 3000 (vs 50000 normal)
    - Kernel peque√±o para separar comprobantes cercanos
    - Filtros de aspecto ratio m√°s flexibles
    
    Respuesta: Array de resultados individuales
    """
    # Verificar dependencias
    if not DEPENDENCIES_OK:
        raise HTTPException(
            status_code=503,
            detail="Dependencias de procesamiento no disponibles. Ejecuta: pip install -r requirements.txt"
        )
    
    # Llamar al procesador con par√°metros ultra-sensibles
    result = await run_image_extractor(background_tasks, file, min_area, debug, individual_comprobantes=True)
    
    # Agregar informaci√≥n espec√≠fica para cuadr√≠culas
    if "individual_results" in result:
        for individual_result in result["individual_results"]:
            individual_result["optimization"] = "grid_detection"
            individual_result["features_used"] = [
                "Detecci√≥n ultra-sensible (min_area: 3000)",
                "Kernel adaptativo peque√±o",
                "Filtros de aspecto ratio flexibles", 
                "Ajuste autom√°tico de par√°metros",
                "Optimizado para cuadr√≠culas de comprobantes"
            ]
            individual_result["recommended_for"] = [
                "Cuadr√≠culas de comprobantes peque√±os",
                "Im√°genes con 10+ comprobantes organizados",
                "Documentos escaneados con m√∫ltiples recibos",
                "Tu caso espec√≠fico con 11 comprobantes"
            ]
    
    return result

@app.get("/download/{session_id}/{filename}")
async def download_file(session_id: str, filename: str):
    """Descargar archivo espec√≠fico de una sesi√≥n"""
    file_path = OUTPUT_DIR / session_id / filename
    
    if not file_path.exists():
        raise HTTPException(status_code=404, detail="Archivo no encontrado")
    
    return FileResponse(
        path=str(file_path),
        filename=filename,
        media_type="image/png"
    )

@app.get("/sessions")
async def list_sessions():
    """Listar sesiones de procesamiento disponibles"""
    sessions = []
    for session_path in OUTPUT_DIR.glob("session_*"):
        if session_path.is_dir():
            files = list(session_path.glob("*.png"))
            sessions.append({
                "session_id": session_path.name,
                "files_count": len(files),
                "created": session_path.stat().st_mtime,
                "files": [f.name for f in files]
            })
    
    return {"sessions": sessions}

@app.delete("/cleanup/{session_id}")
async def cleanup_session(session_id: str):
    """Limpiar archivos de una sesi√≥n espec√≠fica"""
    session_dir = OUTPUT_DIR / session_id
    
    if not session_dir.exists():
        raise HTTPException(status_code=404, detail="Sesi√≥n no encontrada")
    
    shutil.rmtree(session_dir)
    return {"message": f"Sesi√≥n {session_id} eliminada correctamente"}

async def cleanup_temp_file(file_path: Path):
    """Funci√≥n para limpiar archivos temporales en background"""
    try:
        if file_path.exists():
            os.remove(file_path)
    except Exception as e:
        print(f"Error limpiando archivo temporal {file_path}: {e}")

if __name__ == "__main__":
    print("üöÄ Iniciando MADEIN Image Processing API...")
    print("üìñ Documentaci√≥n: http://localhost:8000/docs")
    print("üîß Health check: http://localhost:8000/health")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )