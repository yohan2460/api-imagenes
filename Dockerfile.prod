# Multi-stage Dockerfile para MADEIN Image Processing API - Producción
# Etapa 1: Builder - Para compilar dependencias
FROM python:3.11-slim as builder

# Variables de entorno para build
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PYTHONDONTWRITEBYTECODE=1

# Instalar dependencias de build
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    pkg-config \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libwebp-dev \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Crear directorio de trabajo
WORKDIR /app

# Copiar requirements e instalar dependencias
COPY requirements.txt .
RUN pip install --user --no-cache-dir -r requirements.txt

# Etapa 2: Runtime - Imagen final optimizada
FROM python:3.11-slim

# Información del mantenedor
LABEL maintainer="MADEIN API Team"
LABEL description="API FastAPI para procesamiento de PDFs y extracción de comprobantes con OCR - Producción"
LABEL version="1.0.0"

# Variables de entorno para producción
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive
ENV WORKERS=2
ENV LOG_LEVEL=info
ENV DEBUG=false

# Instalar solo dependencias runtime necesarias
RUN apt-get update && apt-get install -y \
    # Dependencias para OpenCV (solo runtime)
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    # Tesseract OCR
    tesseract-ocr \
    tesseract-ocr-spa \
    tesseract-ocr-eng \
    # Utilidades mínimas
    curl \
    # Librerías runtime para imágenes
    libjpeg62-turbo \
    libpng16-16 \
    libtiff5 \
    libwebp6 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Crear usuario no-root para seguridad
RUN groupadd -r -g 1000 apiuser && useradd -r -u 1000 -g apiuser apiuser

# Crear directorio de trabajo
WORKDIR /app

# Copiar dependencias Python desde el builder
COPY --from=builder /root/.local /home/apiuser/.local

# Crear directorios necesarios con permisos correctos
RUN mkdir -p /app/uploads /app/outputs /app/temp /app/logs \
    && chown -R apiuser:apiuser /app \
    && chmod 755 /app/uploads /app/outputs /app/temp /app/logs

# Copiar código de la aplicación
COPY --chown=apiuser:apiuser . .

# Asegurar que el PATH incluye las dependencias de usuario
ENV PATH=/home/apiuser/.local/bin:$PATH

# Cambiar a usuario no-root
USER apiuser

# Exponer puerto
EXPOSE 8000

# Health check optimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Comando optimizado para producción con múltiples workers
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2", "--log-level", "info", "--access-log"] 